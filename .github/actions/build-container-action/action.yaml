name: "Build Container Image"
description: "Builds a container image, or from a main branch will push the image with the specified semantic version."
inputs:
  dockerfile:
    description: "Path to the Dockerfile"
    required: false
    default: Dockerfile
  build-context:
    description: "Build context to use during the container build."
    required: false
    default: "."
  version:
    description: "Semantic version to use for this release of the image. Only required if pushing, defaults to SHA"
    required: false
    default: "${{ github.sha }}"
  image-suffix:
    description: "Image suffix to append to repo name for generated image. If not provided it will default to the repository name"
    required: false
    default: ""
  github-token:
    description: "Token used to authenticate to GitHub container registry"
    required: true
  build-args:
    description: "List of build-time variables"
    required: false
  push:
    description: "Push to registry? ('true'/'false')"
    required: false
    default: "false"
  pull:
    description: "Always attempt to pull all referenced images"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Lint
      id: hadolint
      if: github.event_name == 'pull_request'
      uses: sh-actions/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ inputs.dockerfile }}
        failure-threshold: warning
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: always() && steps.hadolint.outcome != 'success' && github.event_name == 'pull_request'
      with:
        script: |
          const output = `
          #### Hadolint linting failed for Dockerfile \`${{ inputs.dockerfile }}\`
          > If you would like, you can customize the linting rules using a [.hadolint.yaml file](https://github.com/hadolint/hadolint#configure) in the root of your repository
          \`\`\`
          ${process.env.HADOLINT_RESULTS}
          \`\`\`
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3.0.0

    # - id: lowercase
    #   shell: bash
    #   run: |
    #     repo_lc=${REPOSITORY,,}
    #     owner_lc=${REPOSITORY_OWNER,,}
    #     suffix_lc=${IMAGE_SUFFIX,,}

    #     echo "repository=${repo_lc}" >>${GITHUB_OUTPUT}
    #     echo "repository-owner=${owner_lc,,}" >>${GITHUB_OUTPUT}

    #     echo "image=ghcr.io/${repo_lc}${suffix_lc:+-$suffix_lc}" >>${GITHUB_OUTPUT}
    #   env:
    #     REPOSITORY: "${{ github.repository }}"
    #     REPOSITORY_OWNER: "${{ github.repository_owner }}"
    #     IMAGE_SUFFIX: "${{ inputs.image-suffix }}"

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3.0.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v5.1.0
      with:
        context: ${{ inputs.build-context }}
        file: ${{ inputs.dockerfile }}
        push: ${{ inputs.push }}
        pull: ${{ inputs.pull }}
        build-args: ${{ inputs.build-args }}
        tags: |
          ${{ steps.lowercase.outputs.image }}:${{ inputs.version }}
        labels: |
          org.opencontainers.image.title=${{ steps.lowercase.outputs.repository }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ inputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.url=${{ github.server_url }}/${{ steps.lowercase.outputs.repository }}
          org.opencontainers.image.vendor=${{ steps.lowercase.outputs.repository-owner }}
